name: Run End-To-End Tests

on:
  pull_request:

# Ensures that only a single workflow per PR will run at a time. Cancels in-progress jobs if new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: 1.21
  TEST_CONFORMANCE: (go test -race -timeout 30m -failfast -v -p 2 ./cmd/interchaintest) || (echo "\n\n*****CHAIN and RELAYER LOGS*****" && cat "$HOME/.interchaintest/logs/interchaintest.log" && exit 1)
  TEST_IBC: go test -race -timeout 30m -failfast -v -p 2 ./examples/ibc
  TEST_COSMOS: go test -race -failfast -timeout 30m -v -p 2 ./examples/cosmos

jobs:
  setup-go-cache:
    name: setup-go-cache
    runs-on: ubuntu-latest
    steps:
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: checkout interchaintest
        uses: actions/checkout@v4

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Download Go Dependencies
        run: |
          go mod tidy
          go mod download
          cd local-interchain && go mod tidy && go mod download

  test-conformance:
    name: test-conformance
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: setup-go-cache
    steps:
      # Install and setup go
      - name: Set up Go ${{ env.GO_VERSION}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}

      - name: checkout interchaintest
        uses: actions/checkout@v4

      - name: clean
        run: |-
          rm -rf ~/.interchaintest

      - name: run conformance tests
        id: conformance_test
        run: ${{ env.TEST_CONFORMANCE }}

      - name: Retry Failed Test
        if: steps.conformance_test.outcome == 'failure'
        run: |
          for i in 1 2; do
            echo "Retry attempt $i"
            if ${{ env.TEST_CONFORMANCE }}; then
              echo "Test passed on retry"; exit 0
            fi
          done
          echo "Test failed after retries"
          exit 1

  test-ibc-examples:
    name: test-ibc-examples
    runs-on: ubuntu-latest
    needs: setup-go-cache
    steps:
      # Install and setup go
      - name: Set up Go ${{ env.GO_VERSION}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}
          cache: false

      - name: checkout interchaintest
        uses: actions/checkout@v4

      - name: clean
        run: |-
          rm -rf ~/.interchaintest

      - name: run example ibc tests
        id: ibc_test
        run: ${{ env.TEST_IBC }}

      - name: Retry Failed Test
        if: steps.ibc_test.outcome == 'failure'
        run: |
          for i in 1 2; do
            echo "Retry attempt $i"
            if ${{ env.TEST_IBC }}; then
              echo "Test passed on retry"; exit 0
            fi
          done
          echo "Test failed after retries"
          exit 1

  test-cosmos-examples:
    name: test-cosmos-examples
    runs-on: ubuntu-latest
    needs: setup-go-cache
    steps:
      # Install and setup go
      - name: Set up Go ${{ env.GO_VERSION}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION}}
          cache: false

      - name: checkout interchaintest
        uses: actions/checkout@v4

      - name: clean
        run: |-
          rm -rf ~/.interchaintest

      - name: run example cosmos tests
        id: cosmos_test
        run: ${{ env.TEST_COSMOS }}

      - name: Retry Failed Test
        if: steps.cosmos_test.outcome == 'failure'
        run: |
          for i in 1 2; do
            echo "Retry attempt $i"
            if ${{ env.TEST_COSMOS }}; then
              echo "Test passed on retry"; exit 0
            fi
          done
          echo "Test failed after retries"
          exit 1
