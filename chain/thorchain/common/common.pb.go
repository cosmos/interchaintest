// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/common/common.proto

package common

import (
	"fmt"
	"strings"

	cosmossdk_io_math "cosmossdk.io/math"
	_ "github.com/gogo/protobuf/gogoproto"
)

type Asset struct {
	Chain  string `json:"chain,omitempty"`
	Symbol string `json:"symbol,omitempty"`
	Ticker string `json:"ticker,omitempty"`
	Synth  bool   `json:"synth,omitempty"`
	Trade  bool   `json:"trade,omitempty"`
}

// NewAsset parse the given input into Asset object
func NewAsset(input string) (Asset, error) {
	var asset Asset
	var sym string
	var parts []string
	switch {
	case strings.Count(input, "~") > 0:
		parts = strings.SplitN(input, "~", 2)
		asset.Trade = true
	case strings.Count(input, "/") > 0:
		parts = strings.SplitN(input, "/", 2)
		asset.Synth = true
	default:
		parts = strings.SplitN(input, ".", 2)
	}
	if len(parts) == 1 {
		asset.Chain = "THOR"
		sym = parts[0]
	} else {
		asset.Chain = strings.ToUpper(parts[0])
		sym = parts[1]
	}

	asset.Symbol = strings.ToUpper(sym)
	parts = strings.SplitN(sym, "-", 2)
	asset.Ticker = strings.ToUpper(parts[0])

	return asset, nil
}

// Check if asset is a pegged asset
func (a Asset) IsSyntheticAsset() bool {
	return a.Synth
}

func (a Asset) IsTradeAsset() bool {
	return a.Trade
}

// Get layer1 asset version
func (a Asset) GetLayer1Asset() Asset {
	if !a.IsSyntheticAsset() && !a.IsTradeAsset() {
		return a
	}
	return Asset{
		Chain:  a.Chain,
		Symbol: a.Symbol,
		Ticker: a.Ticker,
		Synth:  false,
		Trade:  false,
	}
}

// String implement fmt.Stringer , return the string representation of Asset
func (a Asset) String() string {
	div := "."
	if a.Synth {
		div = "/"
	}
	if a.Trade {
		div = "~"
	}
	return fmt.Sprintf("%s%s%s", a.Chain, div, a.Symbol)
}

type Coin struct {
	Asset    Asset                  `json:"asset"`
	Amount   cosmossdk_io_math.Uint `json:"amount"`
	Decimals int64                  `json:"decimals,omitempty"`
}

type Coins []Coin

// NewCoin return a new instance of Coin
func NewCoin(asset Asset, amount cosmossdk_io_math.Uint) Coin {
	return Coin{
		Asset:  asset,
		Amount: amount,
	}
}